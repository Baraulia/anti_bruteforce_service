// Code generated by MockGen. DO NOT EDIT.
// Source: limiterInterface.go

// Package mocklimiter is a generated GoMock package.
package mocklimiter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// CheckLimit mocks base method.
func (m *MockLimiter) CheckLimit(ctx context.Context, key string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLimit", ctx, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLimit indicates an expected call of CheckLimit.
func (mr *MockLimiterMockRecorder) CheckLimit(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLimit", reflect.TypeOf((*MockLimiter)(nil).CheckLimit), ctx, key)
}

// ClearAllBuckets mocks base method.
func (m *MockLimiter) ClearAllBuckets(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearAllBuckets", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearAllBuckets indicates an expected call of ClearAllBuckets.
func (mr *MockLimiterMockRecorder) ClearAllBuckets(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAllBuckets", reflect.TypeOf((*MockLimiter)(nil).ClearAllBuckets), ctx)
}

// ClearBuckets mocks base method.
func (m *MockLimiter) ClearBuckets(ctx context.Context, ip, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearBuckets", ctx, ip, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearBuckets indicates an expected call of ClearBuckets.
func (mr *MockLimiterMockRecorder) ClearBuckets(ctx, ip, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearBuckets", reflect.TypeOf((*MockLimiter)(nil).ClearBuckets), ctx, ip, login)
}

// Start mocks base method.
func (m *MockLimiter) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockLimiterMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLimiter)(nil).Start), ctx)
}
