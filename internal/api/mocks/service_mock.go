// Code generated by MockGen. DO NOT EDIT.
// Source: serviceInterface.go

// Package mockservice is a generated GoMock package.
package mockservice

import (
	context "context"
	reflect "reflect"

	models "github.com/Baraulia/anti_bruteforce_service/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationInterface is a mock of ApplicationInterface interface.
type MockApplicationInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationInterfaceMockRecorder
}

// MockApplicationInterfaceMockRecorder is the mock recorder for MockApplicationInterface.
type MockApplicationInterfaceMockRecorder struct {
	mock *MockApplicationInterface
}

// NewMockApplicationInterface creates a new mock instance.
func NewMockApplicationInterface(ctrl *gomock.Controller) *MockApplicationInterface {
	mock := &MockApplicationInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationInterface) EXPECT() *MockApplicationInterfaceMockRecorder {
	return m.recorder
}

// AddToBlackList mocks base method.
func (m *MockApplicationInterface) AddToBlackList(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToBlackList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToBlackList indicates an expected call of AddToBlackList.
func (mr *MockApplicationInterfaceMockRecorder) AddToBlackList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToBlackList", reflect.TypeOf((*MockApplicationInterface)(nil).AddToBlackList), ctx, ip)
}

// AddToWhiteList mocks base method.
func (m *MockApplicationInterface) AddToWhiteList(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWhiteList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWhiteList indicates an expected call of AddToWhiteList.
func (mr *MockApplicationInterfaceMockRecorder) AddToWhiteList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWhiteList", reflect.TypeOf((*MockApplicationInterface)(nil).AddToWhiteList), ctx, ip)
}

// Check mocks base method.
func (m *MockApplicationInterface) Check(ctx context.Context, data models.Data) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockApplicationInterfaceMockRecorder) Check(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockApplicationInterface)(nil).Check), ctx, data)
}

// ClearBuckets mocks base method.
func (m *MockApplicationInterface) ClearBuckets(ctx context.Context, data models.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearBuckets", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearBuckets indicates an expected call of ClearBuckets.
func (mr *MockApplicationInterfaceMockRecorder) ClearBuckets(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearBuckets", reflect.TypeOf((*MockApplicationInterface)(nil).ClearBuckets), ctx, data)
}

// RemoveFromBlackList mocks base method.
func (m *MockApplicationInterface) RemoveFromBlackList(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromBlackList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromBlackList indicates an expected call of RemoveFromBlackList.
func (mr *MockApplicationInterfaceMockRecorder) RemoveFromBlackList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromBlackList", reflect.TypeOf((*MockApplicationInterface)(nil).RemoveFromBlackList), ctx, ip)
}

// RemoveFromWhiteList mocks base method.
func (m *MockApplicationInterface) RemoveFromWhiteList(ctx context.Context, ip string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWhiteList", ctx, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWhiteList indicates an expected call of RemoveFromWhiteList.
func (mr *MockApplicationInterfaceMockRecorder) RemoveFromWhiteList(ctx, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWhiteList", reflect.TypeOf((*MockApplicationInterface)(nil).RemoveFromWhiteList), ctx, ip)
}
